{"version":3,"sources":["components/Menu/index.module.css","logo.svg","components/Hero/index.module.css","components/AboutUs/index.module.css","components/Menu/index.js","components/Hero/index.js","components/AboutUs/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Menu","className","styles","container","wrapper","src","logo","alt","link","href","target","rel","Hero","heroContainer","AboutUs","App","Boolean","window","location","hostname","match","rootElement","document","getElementById","hasChildNodes","hydrate","StrictMode","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8FACAA,EAAOC,QAAU,CAAC,UAAY,wBAAwB,QAAU,sBAAsB,KAAO,mBAAmB,KAAO,qB,kBCDvHD,EAAOC,QAAU,IAA0B,kC,gBCC3CD,EAAOC,QAAU,CAAC,cAAgB,8B,gBCAlCD,EAAOC,QAAU,CAAC,UAAY,6B,sLCGjBC,EAAO,kBAClB,4BAAQC,UAAWC,IAAOC,WACxB,yBAAKF,UAAS,UAAKC,IAAOE,QAAZ,oBACZ,yBAAKC,IAAKC,IAAML,UAAWC,IAAOI,KAAMC,IAAI,SAC5C,6BACE,uBACEN,UAAWC,IAAOM,KAClBC,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,YAQA,uBACEV,UAAWC,IAAOM,KAClBC,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,YAQA,uBACEV,UAAWC,IAAOM,KAClBC,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,wB,gBCtBKC,EAAO,kBAClB,yBAAKX,UAAWC,IAAOW,eAAvB,kB,gBCDWC,EAAU,kBACrB,yBAAKb,UAAWC,IAAOC,WAAvB,qECYaY,MAVf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMC,EAAcC,SAASC,eAAe,QACxCF,EAAYG,gBACdC,kBACE,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFL,GAGFM,iBACE,kBAAC,IAAMD,WAAP,KACE,kBAAC,EAAD,OAEFL,GDgHE,kBAAmBO,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e4a702b6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Menu_container__379bX\",\"wrapper\":\"Menu_wrapper__2uGBL\",\"logo\":\"Menu_logo__2ERdv\",\"link\":\"Menu_link__1d9Se\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heroContainer\":\"Hero_heroContainer__34ne3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"AboutUs_container__1ZDDD\"};","import React from \"react\";\nimport styles from \"./index.module.css\";\nimport logo from \"../../logo.svg\";\n\nexport const Menu = () => (\n  <header className={styles.container}>\n    <div className={`${styles.wrapper} grid_container`}>\n      <img src={logo} className={styles.logo} alt=\"logo\" />\n      <div>\n        <a\n          className={styles.link}\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Um okkur\n        </a>\n        <a\n          className={styles.link}\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Verkefni\n        </a>\n        <a\n          className={styles.link}\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Hafðu samband\n        </a>\n      </div>\n    </div>\n  </header>\n);\n","import React from \"react\";\nimport styles from \"./index.module.css\";\n\nexport const Hero = () => (\n  <div className={styles.heroContainer}>TEKNIKAL GUYS</div>\n);\n","import React from \"react\";\nimport styles from \"./index.module.css\";\n\nexport const AboutUs = () => (\n  <div className={styles.container}>\n    Við erum duglegir strákar sem gerum verkfræði dót\n  </div>\n);\n","import React from \"react\";\nimport \"./App.css\";\nimport { Menu } from \"./components/Menu\";\nimport { Hero } from \"./components/Hero\";\nimport { AboutUs } from \"./components/AboutUs\";\n\nfunction App() {\n  return (\n    <>\n      <Menu />\n      <Hero />\n      <AboutUs />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport { render, hydrate } from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst rootElement = document.getElementById(\"root\");\nif (rootElement.hasChildNodes()) {\n  hydrate(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    rootElement\n  );\n} else {\n  render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    rootElement\n  );\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}